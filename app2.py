import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import acf, adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import io
from datetime import datetime
import math
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
st.title("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à —Ñ–∞–π–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è, 
–∞ –∫–∞–∫–∏–µ –Ω–µ—Ç. –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.

_–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç 
–æ—Ü–µ–Ω–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞._
""")

# –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏
cv_threshold = st.sidebar.slider(
    "–ü–æ—Ä–æ–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)", 
    min_value=0.1, 
    max_value=5.0, 
    value=1.5, 
    step=0.1,
    help="CV > 1.5 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–ª–æ—Ö—É—é –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å"
)

zero_percentage_threshold = st.sidebar.slider(
    "–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", 
    min_value=10, 
    max_value=90, 
    value=40, 
    step=5,
    help="–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω—É–ª–µ–π –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
)

autocorr_threshold = st.sidebar.slider(
    "–ü–æ—Ä–æ–≥ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", 
    min_value=0.1, 
    max_value=0.9, 
    value=0.3, 
    step=0.1,
    help="–ù–∏–∑–∫–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–∞–±—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"
)

stationarity_p_value = st.sidebar.slider(
    "P-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å", 
    min_value=0.01, 
    max_value=0.1, 
    value=0.05, 
    step=0.01,
    help="–ù–∏–∑–∫–æ–µ p-–∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å (–ª–µ–≥—á–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å)"
)

# –ú–µ—Ç–æ–¥ –¥–µ–ª–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏
test_size = st.sidebar.slider(
    "–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 
    min_value=0.1, 
    max_value=0.5, 
    value=0.2, 
    step=0.05,
    help="–î–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π"
)

# –í—ã–±–æ—Ä –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
decomposition_model = st.sidebar.selectbox(
    "–ú–µ—Ç–æ–¥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞",
    ["additive", "multiplicative"],
    index=0,
    help="Additive –¥–ª—è —Ä—è–¥–æ–≤ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∞–º–ø–ª–∏—Ç—É–¥–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏, multiplicative –¥–ª—è —Ä—è–¥–æ–≤ —Å –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è –∞–º–ø–ª–∏—Ç—É–¥–æ–π"
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏

def calculate_cv(series):
    """–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)"""
    series_no_null = series.dropna()
    if len(series_no_null) == 0:
        return float('inf')
    
    mean = np.mean(series_no_null)
    if mean == 0 or np.isclose(mean, 0):
        return float('inf')
    
    return np.std(series_no_null) / abs(mean)

def calculate_entropy(series):
    """–†–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏ –∫–∞–∫ –º–µ—Ä—ã —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏"""
    series = series.dropna()
    if len(series) == 0:
        return np.nan
    
    # –î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    hist, bin_edges = np.histogram(series, bins=min(20, len(np.unique(series))), density=True)
    
    # –†–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏ –ø–æ –®–µ–Ω–Ω–æ–Ω—É
    entropy = 0
    for p in hist:
        if p > 0:
            entropy -= p * np.log2(p)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–Ω—Ç—Ä–æ–ø–∏–∏ (0 - –Ω–∏–∑–∫–∞—è —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å, 1 - –≤—ã—Å–æ–∫–∞—è)
    max_entropy = np.log2(len(hist))
    if max_entropy > 0:
        normalized_entropy = entropy / max_entropy
    else:
        normalized_entropy = np.nan
    
    return normalized_entropy

def estimate_lyapunov(series, lag=1, min_points=10):
    """–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–µ—Ç—Ä–∏–∫–∏ –õ—è–ø—É–Ω–æ–≤–∞"""
    series = series.dropna()
    if len(series) < min_points:
        return np.nan
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∏ –µ–≥–æ —Å–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–∏
        y = series.values[:-lag]
        y_lagged = series.values[lag:]
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
        divergence = np.abs(np.diff(y))
        divergence_lagged = np.abs(np.diff(y_lagged))
        
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        valid_indices = (divergence != 0) & np.isfinite(divergence) & np.isfinite(divergence_lagged)
        if np.sum(valid_indices) < min_points // 2:
            return np.nan
        
        log_ratios = np.log(divergence_lagged[valid_indices] / divergence[valid_indices])
        lyapunov_exp = np.mean(log_ratios)
        
        return lyapunov_exp
    except:
        return np.nan

def calculate_autocorrelation(series, lag=1):
    """–†–∞—Å—á–µ—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"""
    series = series.dropna()
    if len(series) <= lag:
        return np.nan
    try:
        autocorrelation = acf(series, nlags=lag)[lag]
        return autocorrelation
    except:
        return np.nan

def calculate_zero_percentage(series):
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    series = series.dropna()
    if len(series) == 0:
        return 100.0
    return (series == 0).sum() / len(series) * 100

def calculate_sign_changes(series):
    """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞"""
    # –£–¥–∞–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞
    series = series.dropna()
    non_zero_series = series[series != 0]
    if len(non_zero_series) <= 1:
        return 0, 0
    
    signs = np.sign(non_zero_series)
    sign_changes = np.sum(np.abs(np.diff(signs)) > 0)
    return sign_changes, sign_changes / (len(non_zero_series) - 1) * 100

def test_stationarity(series):
    """–¢–µ—Å—Ç –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞ –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å"""
    series = series.dropna()
    if len(series) < 8:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
        return None, np.nan
    
    try:
        result = adfuller(series)
        return result, result[1]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ p-–∑–Ω–∞—á–µ–Ω–∏–µ
    except:
        return None, np.nan

def detect_date_column(df):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π"""
    potential_date_cols = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –æ–±—ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    for col in df.select_dtypes(include=['object', 'string']).columns:
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫ –¥–∞—Ç–µ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            sample = df[col].dropna().head(5)
            success = 0
            for item in sample:
                try:
                    pd.to_datetime(item)
                    success += 1
                except:
                    pass
            
            # –ï—Å–ª–∏ –±–æ–ª–µ–µ 60% —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã, —Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç–æ–π
            if success / len(sample) > 0.6:
                potential_date_cols.append(col)
        except:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–∏–ø–æ–º datetime
    date_cols = list(df.select_dtypes(include=['datetime64']).columns)
    potential_date_cols.extend(date_cols)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π
    if potential_date_cols:
        return potential_date_cols[0]
    
    return None

def evaluate_simple_models(df, date_col, value_col, test_size=0.2):
    """–û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_sorted = df.sort_values(by=date_col).copy()
        df_sorted['numeric_date'] = pd.to_numeric(df_sorted[date_col])
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df_clean = df_sorted.dropna(subset=[value_col, 'numeric_date'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(df_clean) < 10:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π"}
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏: –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        df_clean['prev_value'] = df_clean[value_col].shift(1)
        df_clean = df_clean.dropna()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        train_size = int(len(df_clean) * (1 - test_size))
        train_df = df_clean.iloc[:train_size]
        test_df = df_clean.iloc[train_size:]
        
        if len(train_df) < 5 or len(test_df) < 3:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π"}
        
        # 1. –ù–∞–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        y_naive = test_df['prev_value'].values
        y_true = test_df[value_col].values
        
        naive_mae = mean_absolute_error(y_true, y_naive)
        naive_mse = mean_squared_error(y_true, y_naive)
        naive_rmse = np.sqrt(naive_mse)
        naive_mape = np.mean(np.abs((y_true - y_naive) / np.where(y_true != 0, y_true, 1))) * 100
        
        # 2. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        X_train = train_df[['numeric_date', 'prev_value']]
        y_train = train_df[value_col]
        X_test = test_df[['numeric_date', 'prev_value']]
        
        lr_model = LinearRegression()
        lr_model.fit(X_train, y_train)
        
        y_lr = lr_model.predict(X_test)
        
        lr_mae = mean_absolute_error(y_true, y_lr)
        lr_mse = mean_squared_error(y_true, y_lr)
        lr_rmse = np.sqrt(lr_mse)
        lr_mape = np.mean(np.abs((y_true - y_lr) / np.where(y_true != 0, y_true, 1))) * 100
        
        # 3. Random Forest (–¥–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        try:
            rf_model = RandomForestRegressor(n_estimators=50, random_state=42)
            rf_model.fit(X_train, y_train)
            
            y_rf = rf_model.predict(X_test)
            
            rf_mae = mean_absolute_error(y_true, y_rf)
            rf_mse = mean_squared_error(y_true, y_rf)
            rf_rmse = np.sqrt(rf_mse)
            rf_mape = np.mean(np.abs((y_true - y_rf) / np.where(y_true != 0, y_true, 1))) * 100
        except:
            rf_mae, rf_rmse, rf_mape = np.nan, np.nan, np.nan
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        best_model_name = "–ù–∞–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å"
        best_mae = naive_mae
        
        if lr_mae < best_mae:
            best_model_name = "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è"
            best_mae = lr_mae
            
        if not np.isnan(rf_mae) and rf_mae < best_mae:
            best_model_name = "Random Forest"
            best_mae = rf_mae
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        mape_benchmark = 25  # MAPE –Ω–∏–∂–µ 25% —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        best_mape = min(naive_mape, lr_mape, np.inf if np.isnan(rf_mape) else rf_mape)
        
        forecasting_quality = "–í—ã—Å–æ–∫–∞—è" if best_mape < mape_benchmark else "–°—Ä–µ–¥–Ω—è—è" if best_mape < 2 * mape_benchmark else "–ù–∏–∑–∫–∞—è"
        
        return {
            "naive_mae": naive_mae,
            "naive_rmse": naive_rmse,
            "naive_mape": naive_mape,
            "lr_mae": lr_mae,
            "lr_rmse": lr_rmse,
            "lr_mape": lr_mape,
            "rf_mae": rf_mae if not np.isnan(rf_mae) else None,
            "rf_rmse": rf_rmse if not np.isnan(rf_rmse) else None,
            "rf_mape": rf_mape if not np.isnan(rf_mape) else None,
            "best_model": best_model_name,
            "best_mape": best_mape,
            "forecasting_quality": forecasting_quality
        }
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –º–æ–¥–µ–ª–µ–π: {str(e)}"}

def analyze_forecasting_potential(series, stats_results, model_evaluation=None):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫"""
    if len(series.dropna()) < 4:
        return {
            'cv': np.nan,
            'autocorr': np.nan,
            'zero_percentage': np.nan,
            'sign_changes': np.nan,
            'sign_changes_percentage': np.nan,
            'entropy': np.nan,
            'lyapunov': np.nan,
            'stationarity_p_value': np.nan,
            'conclusion': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
            'reasons': ['–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 4 —Ç–æ—á–µ–∫'],
            'score': 0,
            'model_evaluation': model_evaluation
        }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    cv = stats_results['cv']
    autocorr = stats_results['autocorr']
    zero_percentage = stats_results['zero_percentage']
    sign_changes = stats_results['sign_changes']
    sign_changes_percentage = stats_results['sign_changes_percentage']
    entropy = stats_results['entropy']
    lyapunov = stats_results['lyapunov']
    stationarity_p_value = stats_results['stationarity_p_value']
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏
    reasons = []
    
    # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
    statistical_score = 0
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤–∞—Ä–∏–∞—Ü–∏–∏
    if np.isnan(cv) or cv > cv_threshold * 2:
        statistical_score += 0
        cv_str = f"{cv:.2f}" if not np.isnan(cv) else "‚àû"
        reasons.append(f'–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV = {cv_str} > {cv_threshold * 2})')
    elif cv > cv_threshold:
        statistical_score += 10
        reasons.append(f'–í—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV = {cv:.2f} > {cv_threshold})')
    else:
        statistical_score += 25
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    if np.isnan(autocorr) or abs(autocorr) < autocorr_threshold / 2:
        statistical_score += 0
        autocorr_str = f"{abs(autocorr):.2f}" if not np.isnan(autocorr) else "?"
        reasons.append(f'–ö—Ä–∞–π–Ω–µ —Å–ª–∞–±–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (|r| = {autocorr_str} < {autocorr_threshold / 2})')
    elif abs(autocorr) < autocorr_threshold:
        statistical_score += 10
        reasons.append(f'–°–ª–∞–±–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (|r| = {abs(autocorr):.2f} < {autocorr_threshold})')
    else:
        statistical_score += 25
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if np.isnan(zero_percentage) or zero_percentage > zero_percentage_threshold * 1.5:
        statistical_score += 0
        zero_percentage_str = f"{zero_percentage:.1f}" if not np.isnan(zero_percentage) else "?"
        reasons.append(f'–ö—Ä–∞–π–Ω–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ({zero_percentage_str}% > {zero_percentage_threshold * 1.5}%)')
    elif zero_percentage > zero_percentage_threshold:
        statistical_score += 5
        reasons.append(f'–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ({zero_percentage:.1f}% > {zero_percentage_threshold}%)')
    else:
        statistical_score += 15
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞
    if np.isnan(sign_changes_percentage) or sign_changes_percentage > 50:
        statistical_score += 0
        sign_changes_str = f"{sign_changes_percentage:.1f}" if not np.isnan(sign_changes_percentage) else "?"
        reasons.append(f'–ß–∞—Å—Ç–æ–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ ({sign_changes_str}% –∑–Ω–∞—á–µ–Ω–∏–π)')
    elif sign_changes_percentage > 30:
        statistical_score += 5
        reasons.append(f'–£–º–µ—Ä–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ ({sign_changes_percentage:.1f}% –∑–Ω–∞—á–µ–Ω–∏–π)')
    else:
        statistical_score += 15
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    if np.isnan(entropy) or entropy > 0.8:
        statistical_score += 0
        entropy_str = f"{entropy:.2f}" if not np.isnan(entropy) else "?"
        reasons.append(f'–í—ã—Å–æ–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è (—Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å) —Ä—è–¥–∞ ({entropy_str})')
    elif entropy > 0.5:
        statistical_score += 5
        reasons.append(f'–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è (—Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å) —Ä—è–¥–∞ ({entropy:.2f})')
    else:
        statistical_score += 10
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
    stationarity_threshold = 0.05  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è p-value –≤ —Ç–µ—Å—Ç–µ –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
    if np.isnan(stationarity_p_value) or stationarity_p_value > stationarity_threshold * 2:
        statistical_score += 0
        p_value_str = f"{stationarity_p_value:.3f}" if not np.isnan(stationarity_p_value) else "?"
        reasons.append(f'–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –Ω–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω (p = {p_value_str})')
    elif stationarity_p_value > stationarity_threshold:
        statistical_score += 5
    else:
        statistical_score += 10
        
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–æ 100 –±–∞–ª–ª–æ–≤
    max_statistical_score = 25 + 25 + 15 + 15 + 10 + 10
    normalized_statistical_score = (statistical_score / max_statistical_score) * 100
    
    # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    model_score = 0
    if model_evaluation and "error" not in model_evaluation:
        best_mape = model_evaluation.get('best_mape', float('inf'))
        best_model = model_evaluation.get('best_model', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ MAPE
        if best_mape < 10:
            model_score = 100  # –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (MAPE < 10%)
        elif best_mape < 20:
            model_score = 75   # –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (MAPE < 20%)
        elif best_mape < 30:
            model_score = 50   # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (MAPE < 30%)
        elif best_mape < 50:
            model_score = 25   # –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (MAPE < 50%)
        else:
            model_score = 0    # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (MAPE >= 50%)
        
        if best_mape > 30:
            reasons.append(f'–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (MAPE = {best_mape:.1f}% > 30%)')
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
    # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞, —É—á–∏—Ç—ã–≤–∞–µ–º –µ—ë —Å –≤–µ—Å–æ–º 60%, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å –≤–µ—Å–æ–º 40%
    # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É
    if model_evaluation and "error" not in model_evaluation:
        final_score = 0.4 * normalized_statistical_score + 0.6 * model_score
    else:
        final_score = normalized_statistical_score
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    if final_score >= 70:
        conclusion = '–•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥'
    elif final_score >= 40:
        conclusion = '–°—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥'
    else:
        conclusion = '–ü–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥'
    
    # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω –Ω–µ—Ç, –Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è
    if not reasons and conclusion == '–•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
        reasons.append('–°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏')
    
    return {
        'cv': cv,
        'autocorr': autocorr,
        'zero_percentage': zero_percentage,
        'sign_changes': sign_changes,
        'sign_changes_percentage': sign_changes_percentage,
        'entropy': entropy,
        'lyapunov': lyapunov,
        'stationarity_p_value': stationarity_p_value,
        'conclusion': conclusion,
        'reasons': reasons,
        'score': final_score,
        'model_evaluation': model_evaluation
    }

def create_time_series_plot(df, date_col, value_col, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Å –ø–æ–º–æ—â—å—é Plotly"""
    try:
        fig = px.line(df, x=date_col, y=value_col, title=title or f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {value_col}")
        fig.update_layout(height=400, showlegend=False, template="plotly_white")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        if len(df) > 5:
            df_valid = df.dropna(subset=[value_col])
            if len(df_valid) > 5:
                window_size = max(3, len(df_valid) // 10)
                df_valid['rolling_mean'] = df_valid[value_col].rolling(window=window_size, center=True).mean()
                fig.add_scatter(x=df_valid[date_col], y=df_valid['rolling_mean'],
                               mode='lines', line=dict(color='red', width=1.5, dash='dash'),
                               name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ')
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {value_col}",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=400
        )
        return fig

def create_distribution_plot(series, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Plotly"""
    try:
        fig = px.histogram(series.dropna(), title=title or "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π",
                          nbins=min(30, len(np.unique(series.dropna()))))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–≤—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        fig.update_traces(opacity=0.7)
        fig.update_layout(height=300, showlegend=False, template="plotly_white")
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=300
        )
        return fig

def create_acf_plot(series, lags=10, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Plotly"""
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
    try:
        series_clean = series.dropna()
        if len(series_clean) < lags + 1:
            lags = max(1, len(series_clean) - 1)
            
        acf_values = acf(series_clean, nlags=lags)
        
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=list(range(lags + 1)),
            y=acf_values,
            name='ACF'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (95%)
        confidence = 1.96 / np.sqrt(len(series_clean))
        fig.add_trace(go.Scatter(
            x=list(range(lags + 1)),
            y=[confidence] * (lags + 1),
            mode='lines',
            line=dict(dash='dash', color='red'),
            name='95% Confidence'
        ))
        
        fig.add_trace(go.Scatter(
            x=list(range(lags + 1)),
            y=[-confidence] * (lags + 1),
            mode='lines',
            line=dict(dash='dash', color='red'),
            name='95% Confidence'
        ))
        
        fig.update_layout(
            title=title or '–ì—Ä–∞—Ñ–∏–∫ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
            xaxis_title='–õ–∞–≥',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ ACF',
            height=300,
            showlegend=False,
            template="plotly_white"
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=300
        )
        return fig

def create_lag_plot(series, lag=1, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (t) –∏ (t-lag)"""
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ –∏ –∑–∞–ø–∞–∑–¥—ã–≤–∞—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        series_clean = series.dropna()
        if len(series_clean) <= lag:
            raise ValueError(f"–î–ª–∏–Ω–∞ —Ä—è–¥–∞ ({len(series_clean)}) –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –ª–∞–≥—É ({lag})")
        
        current_values = series_clean.iloc[lag:].values
        lagged_values = series_clean.iloc[:-lag].values
        
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ—è–Ω–∏—è
        fig.add_trace(go.Scatter(
            x=lagged_values,
            y=current_values,
            mode='markers',
            marker=dict(
                color='blue',
                size=8,
                opacity=0.6
            ),
            name='Lag Plot'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é y=x –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        min_val = min(np.min(lagged_values), np.min(current_values))
        max_val = max(np.max(lagged_values), np.max(current_values))
        
        fig.add_trace(go.Scatter(
            x=[min_val, max_val],
            y=[min_val, max_val],
            mode='lines',
            line=dict(
                color='red',
                width=1,
                dash='dash'
            ),
            name='y=x'
        ))
        
        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlation = np.corrcoef(lagged_values, current_values)[0, 1]
        annotation_text = f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.2f}"
        
        fig.update_layout(
            title=title or f'Lag Plot (lag={lag}): –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö',
            xaxis_title=f'–ó–Ω–∞—á–µ–Ω–∏–µ (t-{lag})',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ (t)',
            height=400,
            showlegend=False,
            template="plotly_white",
            annotations=[
                dict(
                    x=0.95,
                    y=0.05,
                    xref="paper",
                    yref="paper",
                    text=annotation_text,
                    showarrow=False,
                    bgcolor="white",
                    bordercolor="black",
                    borderwidth=1
                )
            ]
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å Lag Plot",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=400
        )
        return fig

def create_box_plot(series, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —è—â–∏–∫–∞ —Å —É—Å–∞–º–∏ (Box Plot) –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        series_clean = series.dropna()
        if len(series_clean) < 4:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è Box Plot (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 4 —Ç–æ—á–∫–∏)")
        
        fig = go.Figure()
        fig.add_trace(go.Box(
            y=series_clean,
            name='',
            boxpoints='all',  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏
            jitter=0.5,       # –†–∞–∑–±—Ä–æ—Å —Ç–æ—á–µ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            pointpos=0,       # –ü–æ–∑–∏—Ü–∏—è —Ç–æ—á–µ–∫: 0 - –ø–æ —Ü–µ–Ω—Ç—Ä—É (—á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ–∫—Å—É)
            marker=dict(
                color='blue',
                size=6,
                opacity=0.7
            ),
            line=dict(
                color='darkblue', 
                width=2
            ),
            fillcolor='lightblue',
            whiskerwidth=0.8,
            notched=False
        ))
        
        fig.update_layout(
            title=title or 'Box Plot: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ',
            height=400,
            showlegend=False,
            template="plotly_white"
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å Box Plot",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=400
        )
        return fig

def create_qq_plot(series, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ QQ-Plot –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"""
    try:
        from scipy import stats as scipy_stats
        
        series_clean = series.dropna()
        if len(series_clean) < 4:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è QQ-Plot (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 4 —Ç–æ—á–∫–∏)")
        
        # –†–∞—Å—á–µ—Ç –∫–≤–∞–Ω—Ç–∏–ª–µ–π
        sorted_data = np.sort(series_clean)
        n = len(sorted_data)
        quantiles = np.arange(1, n + 1) / (n + 1)  # Quantiles from 1/(n+1) to n/(n+1)
        theoretical_quantiles = scipy_stats.norm.ppf(quantiles)
        
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ—è–Ω–∏—è —Å —Ç–æ—á–∫–∞–º–∏
        fig.add_trace(go.Scatter(
            x=theoretical_quantiles,
            y=sorted_data,
            mode='markers',
            marker=dict(
                color='blue',
                size=6,
                opacity=0.7
            ),
            name='Data Points'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é y=ax+b
        slope, intercept = np.polyfit(theoretical_quantiles, sorted_data, 1)
        line_x = np.array([min(theoretical_quantiles), max(theoretical_quantiles)])
        line_y = slope * line_x + intercept
        
        fig.add_trace(go.Scatter(
            x=line_x,
            y=line_y,
            mode='lines',
            line=dict(
                color='red',
                width=1.5
            ),
            name='Fitted Line'
        ))
        
        fig.update_layout(
            title=title or 'QQ-Plot: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º',
            xaxis_title='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–∞–Ω—Ç–∏–ª–∏',
            yaxis_title='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–∞–Ω—Ç–∏–ª–∏',
            height=400,
            showlegend=False,
            template="plotly_white"
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å QQ-Plot",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=400
        )
        return fig

def create_decomposition_plot(df, date_col, value_col, model="additive", title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –Ω–∞ —Ç—Ä–µ–Ω–¥, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –æ—Å—Ç–∞—Ç–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        df_valid = df.dropna(subset=[date_col, value_col]).sort_values(by=date_col)
        if len(df_valid) < 8:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 8 —Ç–æ—á–µ–∫)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–∞—Ç—ã
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
        ts = df_valid.set_index(date_col)[value_col]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        # –ü—Ä–∏ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥=12, –ø—Ä–∏ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥=4
        timedelta = pd.Series(ts.index).diff().mode()[0]
        if timedelta.days > 364 and timedelta.days < 366:
            # –ì–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            period = 1
        elif timedelta.days > 89 and timedelta.days < 93:
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            period = 4
        elif timedelta.days > 27 and timedelta.days < 32:
            # –ú–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            period = 12
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–µ—Å—è—á–Ω—ã–µ –∏ –Ω–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∫–∞–∫ 25% –æ—Ç –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
            period = max(2, int(len(ts) * 0.25))
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ —á–µ–º 2*–ø–µ—Ä–∏–æ–¥, —É–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥
        if len(ts) < 2 * period:
            period = max(2, len(ts) // 2)
        
        # –î–µ–ª–∞–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é
        result = seasonal_decompose(
            ts, 
            model=model, 
            period=period,
            extrapolate_trend='freq'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig = make_subplots(
            rows=4, 
            cols=1,
            subplot_titles=('–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥', '–¢—Ä–µ–Ω–¥', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–û—Å—Ç–∞—Ç–∫–∏'),
            vertical_spacing=0.1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥
        fig.add_trace(
            go.Scatter(x=ts.index, y=ts.values, mode='lines', name='–ò—Å—Ö–æ–¥–Ω—ã–π —Ä—è–¥'),
            row=1, col=1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        fig.add_trace(
            go.Scatter(x=ts.index, y=result.trend, mode='lines', name='–¢—Ä–µ–Ω–¥', line=dict(color='red')),
            row=2, col=1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        fig.add_trace(
            go.Scatter(x=ts.index, y=result.seasonal, mode='lines', name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', line=dict(color='green')),
            row=3, col=1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        fig.add_trace(
            go.Scatter(x=ts.index, y=result.resid, mode='lines', name='–û—Å—Ç–∞—Ç–∫–∏', line=dict(color='purple')),
            row=4, col=1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—É—é –ª–∏–Ω–∏—é –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
        fig.add_trace(
            go.Scatter(x=[ts.index.min(), ts.index.max()], y=[0, 0], mode='lines', 
                      line=dict(color='black', width=0.5, dash='dash'), showlegend=False),
            row=3, col=1
        )
        
        fig.add_trace(
            go.Scatter(x=[ts.index.min(), ts.index.max()], y=[0, 0], mode='lines', 
                      line=dict(color='black', width=0.5, dash='dash'), showlegend=False),
            row=4, col=1
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫–µ—Ç
        fig.update_layout(
            title=title or f'–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ ({model}): {value_col}',
            height=800,
            showlegend=False,
            template="plotly_white"
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=800
        )
        return fig

def create_seasonality_heatmap(df, date_col, value_col, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–≥–æ–¥—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –º–µ—Å—è—Ü—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º)"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_valid = df.dropna(subset=[date_col, value_col])
        if len(df_valid) < 12:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 12 —Ç–æ—á–µ–∫)")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
        df_sorted = df_valid.sort_values(by=date_col)
        date_diffs = pd.Series(df_sorted[date_col]).diff().dropna()
        
        if len(date_diffs) == 0:
            raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
        modal_diff = date_diffs.mode()[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        if modal_diff.days <= 1:
            # –î–Ω–µ–≤–Ω—ã–µ –∏–ª–∏ –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
            df_valid['season_x'] = df_valid[date_col].dt.day
            df_valid['season_y'] = df_valid[date_col].dt.month
            x_label = "–î–µ–Ω—å –º–µ—Å—è—Ü–∞"
            y_label = "–ú–µ—Å—è—Ü"
        elif modal_diff.days <= 7:
            # –ù–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞–º
            df_valid['season_x'] = df_valid[date_col].dt.dayofweek
            df_valid['season_y'] = df_valid[date_col].dt.month
            x_label = "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"
            y_label = "–ú–µ—Å—è—Ü"
            # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
            day_names = {0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'}
            df_valid['season_x'] = df_valid['season_x'].map(day_names)
        elif modal_diff.days <= 31:
            # –ú–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –≥–æ–¥–∞–º
            df_valid['season_x'] = df_valid[date_col].dt.month
            df_valid['season_y'] = df_valid[date_col].dt.year
            x_label = "–ú–µ—Å—è—Ü"
            y_label = "–ì–æ–¥"
            # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
            month_names = {1: '–Ø–Ω–≤', 2: '–§–µ–≤', 3: '–ú–∞—Ä', 4: '–ê–ø—Ä', 5: '–ú–∞–π', 6: '–ò—é–Ω', 
                          7: '–ò—é–ª', 8: '–ê–≤–≥', 9: '–°–µ–Ω', 10: '–û–∫—Ç', 11: '–ù–æ—è', 12: '–î–µ–∫'}
            df_valid['season_x'] = df_valid['season_x'].map(month_names)
        elif modal_diff.days <= 92:
            # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º –∏ –≥–æ–¥–∞–º
            df_valid['season_x'] = df_valid[date_col].dt.quarter
            df_valid['season_y'] = df_valid[date_col].dt.year
            x_label = "–ö–≤–∞—Ä—Ç–∞–ª"
            y_label = "–ì–æ–¥"
            # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ –Ω–∞ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
            quarter_names = {1: 'Q1', 2: 'Q2', 3: 'Q3', 4: 'Q4'}
            df_valid['season_x'] = df_valid['season_x'].map(quarter_names)
        else:
            # –ì–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ–¥–∞–º –∏ –¥–µ–∫–∞–¥–∞–º
            df_valid['season_x'] = df_valid[date_col].dt.year % 10  # –ì–æ–¥ –≤–Ω—É—Ç—Ä–∏ –¥–µ–∫–∞–¥—ã
            df_valid['season_y'] = df_valid[date_col].dt.year // 10 * 10  # –î–µ–∫–∞–¥–∞ (2020, 2010, etc.)
            x_label = "–ì–æ–¥ –≤ –¥–µ–∫–∞–¥–µ"
            y_label = "–î–µ–∫–∞–¥–∞"
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        pivot_table = df_valid.pivot_table(
            values=value_col,
            index='season_y',
            columns='season_x',
            aggfunc='mean'
        )
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏ –∫–æ–ª–æ–Ω–∫–∏
        pivot_table = pivot_table.sort_index(axis=0)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö —Å—Ä–µ–¥–Ω–∏–º–∏ –ø–æ —Å—Ç–æ–ª–±—Ü—É
        # –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        for col in pivot_table.columns:
            if pivot_table[col].count() > 0:
                pivot_table[col] = pivot_table[col].fillna(pivot_table[col].mean())
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏–º–∏ –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∏, –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö –Ω—É–ª—è–º–∏
        pivot_table = pivot_table.fillna(0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º RdBu_r
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —à–∫–∞–ª—É
        if (pivot_table.min().min() < 0) and (pivot_table.max().max() > 0):
            color_scale = 'RdBu_r'
        elif pivot_table.min().min() < 0:
            color_scale = 'Blues_r'  # –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        else:
            color_scale = 'Reds'  # –î–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        fig = px.imshow(
            pivot_table,
            labels=dict(x=x_label, y=y_label, color=value_col),
            x=pivot_table.columns,
            y=pivot_table.index,
            color_continuous_scale=color_scale,
            aspect='auto',
            text_auto='.1f'  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫–µ—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        fig.update_layout(
            title=title or f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {value_col}',
            height=400,
            template="plotly_white",
            coloraxis_colorbar=dict(
                title=value_col,
                tickformat='.1f'
            ),
            xaxis=dict(
                tickmode='array',
                tickvals=list(range(len(pivot_table.columns))),
                ticktext=[str(col) for col in pivot_table.columns]
            ),
            yaxis=dict(
                tickmode='array',
                tickvals=list(range(len(pivot_table.index))),
                ticktext=[str(idx) for idx in pivot_table.index]
            )
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=400
        )
        return fig

def create_model_evaluation_plot(df, date_col, value_col, model_results, test_size=0.2, title=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"""
    try:
        if "error" in model_results:
            raise ValueError(model_results["error"])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_sorted = df.sort_values(by=date_col).copy()
        df_sorted['numeric_date'] = pd.to_numeric(df_sorted[date_col])
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df_clean = df_sorted.dropna(subset=[value_col, 'numeric_date'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(df_clean) < 10:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏: –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        df_clean['prev_value'] = df_clean[value_col].shift(1)
        df_clean = df_clean.dropna()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        train_size = int(len(df_clean) * (1 - test_size))
        train_df = df_clean.iloc[:train_size]
        test_df = df_clean.iloc[train_size:]
        
        if len(train_df) < 5 or len(test_df) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_values = test_df[value_col].values
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
        naive_pred = test_df['prev_value'].values
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        X_train = train_df[['numeric_date', 'prev_value']]
        y_train = train_df[value_col]
        X_test = test_df[['numeric_date', 'prev_value']]
        
        lr_model = LinearRegression()
        lr_model.fit(X_train, y_train)
        lr_pred = lr_model.predict(X_test)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Random Forest (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if model_results.get('rf_mae') is not None:
            try:
                rf_model = RandomForestRegressor(n_estimators=50, random_state=42)
                rf_model.fit(X_train, y_train)
                rf_pred = rf_model.predict(X_test)
            except:
                rf_pred = None
        else:
            rf_pred = None
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        fig.add_trace(go.Scatter(
            x=test_df[date_col],
            y=actual_values,
            mode='lines+markers',
            name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            line=dict(color='blue', width=2)
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
        fig.add_trace(go.Scatter(
            x=test_df[date_col],
            y=naive_pred,
            mode='lines+markers',
            name='–ù–∞–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å',
            line=dict(color='green', width=1.5, dash='dot')
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        fig.add_trace(go.Scatter(
            x=test_df[date_col],
            y=lr_pred,
            mode='lines+markers',
            name='–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è',
            line=dict(color='red', width=1.5, dash='dash')
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Random Forest (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if rf_pred is not None:
            fig.add_trace(go.Scatter(
                x=test_df[date_col],
                y=rf_pred,
                mode='lines+markers',
                name='Random Forest',
                line=dict(color='purple', width=1.5, dash='dashdot')
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        annotations = []
        
        annotations.append(dict(
            x=0.5,
            y=1.05,
            xref="paper",
            yref="paper",
            text=f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {model_results['best_model']} (MAPE = {model_results['best_mape']:.1f}%)",
            showarrow=False,
            font=dict(size=12, color="black"),
            bgcolor="white",
            bordercolor="black",
            borderwidth=1
        ))
        
        fig.update_layout(
            title=title or f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {value_col}',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ',
            height=500,
            showlegend=True,
            template="plotly_white",
            annotations=annotations
        )
        
        return fig
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig = go.Figure()
        fig.update_layout(
            title="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π",
            annotations=[dict(
                text=f"–û—à–∏–±–∫–∞: {str(e)}",
                showarrow=False,
                xref="paper",
                yref="paper",
                x=0.5,
                y=0.5
            )],
            height=500
        )
        return fig

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª", type=["csv", "xlsx", "xls"])

if uploaded_file is not None:
    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        if uploaded_file.name.endswith('.csv'):
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            for sep in [',', ';', '\t']:
                try:
                    df = pd.read_csv(uploaded_file, sep=sep)
                    if len(df.columns) > 1:  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
                        break
                except:
                    continue
        else:  # Excel
            df = pd.read_excel(uploaded_file)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        uploaded_file.seek(0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π
        date_col = detect_date_column(df)
        
        if date_col:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π
            df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
            st.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π: {date_col}")
            
            # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π, –µ—Å–ª–∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            date_col = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π",
                options=[date_col] + [col for col in df.columns if col != date_col],
                index=0
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π
            df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
            numeric_cols = [col for col in numeric_cols if col != date_col]
            
            if not numeric_cols:
                st.error("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            else:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(numeric_cols)} —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                selected_cols = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã)",
                    options=numeric_cols,
                    default=[]
                )
                
                if selected_cols:
                    numeric_cols = selected_cols
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                st.subheader("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                total_rows = len(df)
                date_range = f"—Å {df[date_col].min().strftime('%d.%m.%Y')} –ø–æ {df[date_col].max().strftime('%d.%m.%Y')}"
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", total_rows)
                with col2:
                    st.metric("–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö", date_range)
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ö–æ—Ä–æ—à–æ –∏ –ø–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
                good_forecasting = []
                medium_forecasting = []
                bad_forecasting = []
                
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                analysis_results = {}
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
                progress_bar = st.progress(0)
                progress_text = st.empty()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü
                for i, col in enumerate(numeric_cols):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = (i + 1) / len(numeric_cols)
                    progress_bar.progress(progress)
                    progress_text.text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–æ–ª–±–µ—Ü {i+1} –∏–∑ {len(numeric_cols)}: {col}")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    series = df[col].copy()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                    stats_results = {
                        'cv': calculate_cv(series),
                        'autocorr': calculate_autocorrelation(series, lag=1),
                        'zero_percentage': calculate_zero_percentage(series),
                        'entropy': calculate_entropy(series),
                        'lyapunov': estimate_lyapunov(series),
                    }
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–∫–∞
                    sign_changes, sign_changes_percentage = calculate_sign_changes(series)
                    stats_results['sign_changes'] = sign_changes
                    stats_results['sign_changes_percentage'] = sign_changes_percentage
                    
                    # –¢–µ—Å—Ç –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
                    adf_result, p_value = test_stationarity(series)
                    stats_results['stationarity_test'] = adf_result
                    stats_results['stationarity_p_value'] = p_value
                    
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                    model_evaluation = evaluate_simple_models(df, date_col, col, test_size=test_size)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                    analysis = analyze_forecasting_potential(series, stats_results, model_evaluation)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    analysis_results[col] = {
                        'stats': stats_results,
                        'analysis': analysis,
                        'model_evaluation': model_evaluation
                    }
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏
                    if analysis['conclusion'] == '–•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                        good_forecasting.append(col)
                    elif analysis['conclusion'] == '–°—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                        medium_forecasting.append(col)
                    else:
                        bad_forecasting.append(col)
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Ç–µ–∫—Å—Ç
                progress_bar.empty()
                progress_text.empty()
                
                # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.subheader("–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º")
                
                # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                summary_data = []
                for col in numeric_cols:
                    result = analysis_results[col]
                    summary_data.append({
                        '–°—Ç–æ–ª–±–µ—Ü': col,
                        'CV': f"{result['stats']['cv']:.2f}" if not np.isnan(result['stats']['cv']) else "‚àû",
                        '–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è': f"{result['stats']['autocorr']:.2f}" if not np.isnan(result['stats']['autocorr']) else "N/A",
                        '% –Ω—É–ª–µ–π': f"{result['stats']['zero_percentage']:.1f}%" if not np.isnan(result['stats']['zero_percentage']) else "N/A",
                        '–≠–Ω—Ç—Ä–æ–ø–∏—è': f"{result['stats']['entropy']:.2f}" if not np.isnan(result['stats']['entropy']) else "N/A",
                        '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å (p)': f"{result['stats']['stationarity_p_value']:.3f}" if not np.isnan(result['stats']['stationarity_p_value']) else "N/A",
                        '–û—Ü–µ–Ω–∫–∞': f"{result['analysis']['score']:.1f}",
                        '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ': result['analysis']['conclusion']
                    })
                
                summary_df = pd.DataFrame(summary_data)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                def highlight_conclusion(val):
                    if val == '–•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                        return 'background-color: lightgreen'
                    elif val == '–°—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                        return 'background-color: khaki'
                    else:
                        return 'background-color: lightcoral'
                
                # –°—Ç–∏–ª–∏–∑—É–µ–º DataFrame
                styled_df = summary_df.style.applymap(
                    highlight_conclusion, 
                    subset=['–ó–∞–∫–ª—é—á–µ–Ω–∏–µ']
                )
                
                st.dataframe(styled_df, use_container_width=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
                if len(summary_df) > 0:
                    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è Excel-—Ñ–∞–π–ª–∞
                    excel_buffer = io.BytesIO()
                    
                    # –°–æ–∑–¥–∞–µ–º Excel-writer
                    with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                        summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', index=False)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                        for col in numeric_cols:
                            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
                            stats = analysis_results[col]['stats']
                            analysis = analysis_results[col]['analysis']
                            model_eval = analysis_results[col]['model_evaluation']
                            
                            metrics = []
                            values = []
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                            metrics.append('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)')
                            values.append(f"{stats['cv']:.2f}" if not np.isnan(stats['cv']) else "‚àû")
                            
                            metrics.append('–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
                            values.append(f"{stats['autocorr']:.2f}" if not np.isnan(stats['autocorr']) else "N/A")
                            
                            metrics.append('% –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π')
                            values.append(f"{stats['zero_percentage']:.1f}%" if not np.isnan(stats['zero_percentage']) else "N/A")
                            
                            metrics.append('% —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞')
                            values.append(f"{stats['sign_changes_percentage']:.1f}%" if not np.isnan(stats['sign_changes_percentage']) else "N/A")
                            
                            metrics.append('–≠–Ω—Ç—Ä–æ–ø–∏—è')
                            values.append(f"{stats['entropy']:.2f}" if not np.isnan(stats['entropy']) else "N/A")
                            
                            metrics.append('–ö–æ—ç—Ñ. –õ—è–ø—É–Ω–æ–≤–∞')
                            values.append(f"{stats['lyapunov']:.2f}" if not np.isnan(stats['lyapunov']) else "N/A")
                            
                            metrics.append('P-–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏')
                            values.append(f"{stats['stationarity_p_value']:.3f}" if not np.isnan(stats['stationarity_p_value']) else "N/A")
                            
                            metrics.append('–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞')
                            values.append(f"{analysis['score']:.1f}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
                            if "error" not in model_eval:
                                metrics.append('–ù–∞–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å (MAPE)')
                                values.append(f"{model_eval.get('naive_mape', 'N/A'):.1f}%" if model_eval.get('naive_mape') is not None else "N/A")
                                
                                metrics.append('–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (MAPE)')
                                values.append(f"{model_eval.get('lr_mape', 'N/A'):.1f}%" if model_eval.get('lr_mape') is not None else "N/A")
                                
                                metrics.append('Random Forest (MAPE)')
                                if model_eval.get('rf_mape') is not None:
                                    values.append(f"{model_eval['rf_mape']:.1f}%")
                                else:
                                    values.append("N/A")
                                
                                metrics.append('–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å')
                                values.append(model_eval.get('best_model', 'N/A'))
                            
                            metrics.append('–ó–∞–∫–ª—é—á–µ–Ω–∏–µ')
                            values.append(analysis['conclusion'])
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                            if analysis['reasons']:
                                metrics.append('–ü—Ä–∏—á–∏–Ω—ã')
                                values.append("; ".join(analysis['reasons']))
                            
                            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame
                            detail_df = pd.DataFrame({'–ú–µ—Ç—Ä–∏–∫–∞': metrics, '–ó–Ω–∞—á–µ–Ω–∏–µ': values})
                            sheet_name = col[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ –¥–ª—è Excel
                            detail_df.to_excel(writer, sheet_name=sheet_name, index=False)
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                    excel_buffer.seek(0)
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ Excel",
                        data=excel_buffer,
                        file_name="–ê–Ω–∞–ª–∏–∑_–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏.xlsx",
                        mime="application/vnd.ms-excel"
                    )
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ —Å —Ä–∞–∑–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å—é
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("### üü¢ –•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ")
                    if good_forecasting:
                        for col in good_forecasting:
                            st.markdown(f"- **{col}** (–æ—Ü–µ–Ω–∫–∞: {analysis_results[col]['analysis']['score']:.1f})")
                    else:
                        st.markdown("*–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*")
                
                with col2:
                    st.markdown("### üü† –°—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ")
                    if medium_forecasting:
                        for col in medium_forecasting:
                            st.markdown(f"- **{col}** (–æ—Ü–µ–Ω–∫–∞: {analysis_results[col]['analysis']['score']:.1f})")
                    else:
                        st.markdown("*–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*")
                
                with col3:
                    st.markdown("### üî¥ –ü–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ")
                    if bad_forecasting:
                        for col in bad_forecasting:
                            st.markdown(f"- **{col}** (–æ—Ü–µ–Ω–∫–∞: {analysis_results[col]['analysis']['score']:.1f})")
                    else:
                        st.markdown("*–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*")
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                st.markdown("---")
                st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É")
                
                # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                column_tabs = st.tabs(numeric_cols)
                
                for i, col in enumerate(numeric_cols):
                    with column_tabs[i]:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                        analysis = analysis_results[col]['analysis']
                        stats = analysis_results[col]['stats']
                        model_evaluation = analysis_results[col]['model_evaluation']
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è
                        if analysis['conclusion'] == '–•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                            conclusion_color = 'green'
                        elif analysis['conclusion'] == '–°—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                            conclusion_color = 'orange'
                        else:
                            conclusion_color = 'red'
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
                        st.markdown(f"### –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: <span style='color:{conclusion_color}'>{analysis['conclusion']}</span>", unsafe_allow_html=True)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
                        if analysis['reasons']:
                            st.markdown("#### –ü—Ä–∏—á–∏–Ω—ã:")
                            for reason in analysis['reasons']:
                                st.markdown(f"- {reason}")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
                        metrics_row1_col1, metrics_row1_col2, metrics_row1_col3, metrics_row1_col4 = st.columns(4)
                        with metrics_row1_col1:
                            st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)", f"{stats['cv']:.2f}" if not np.isnan(stats['cv']) else "‚àû")
                        with metrics_row1_col2:
                            st.metric("–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è", f"{stats['autocorr']:.2f}" if not np.isnan(stats['autocorr']) else "N/A")
                        with metrics_row1_col3:
                            st.metric("% –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", f"{stats['zero_percentage']:.1f}%" if not np.isnan(stats['zero_percentage']) else "N/A")
                        with metrics_row1_col4:
                            st.metric("% —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞", f"{stats['sign_changes_percentage']:.1f}%" if not np.isnan(stats['sign_changes_percentage']) else "N/A")
                        
                        metrics_row2_col1, metrics_row2_col2, metrics_row2_col3, metrics_row2_col4 = st.columns(4)
                        with metrics_row2_col1:
                            st.metric("–≠–Ω—Ç—Ä–æ–ø–∏—è", f"{stats['entropy']:.2f}" if not np.isnan(stats['entropy']) else "N/A")
                        with metrics_row2_col2:
                            st.metric("–ö–æ—ç—Ñ. –õ—è–ø—É–Ω–æ–≤–∞", f"{stats['lyapunov']:.2f}" if not np.isnan(stats['lyapunov']) else "N/A")
                        with metrics_row2_col3:
                            st.metric("P-–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏", f"{stats['stationarity_p_value']:.3f}" if not np.isnan(stats['stationarity_p_value']) else "N/A")
                        with metrics_row2_col4:
                            st.metric("–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞", f"{analysis['score']:.1f}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
                        if model_evaluation and "error" not in model_evaluation:
                            st.markdown("#### –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:")
                            
                            model_col1, model_col2, model_col3 = st.columns(3)
                            with model_col1:
                                st.metric("–ù–∞–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å (MAPE)", f"{model_evaluation['naive_mape']:.1f}%")
                            with model_col2:
                                st.metric("–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (MAPE)", f"{model_evaluation['lr_mape']:.1f}%")
                            with model_col3:
                                if model_evaluation.get('rf_mape') is not None:
                                    st.metric("Random Forest (MAPE)", f"{model_evaluation['rf_mape']:.1f}%")
                                else:
                                    st.metric("Random Forest (MAPE)", "N/A")
                            
                            st.markdown(f"**–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {model_evaluation['best_model']}** (MAPE = {model_evaluation['best_mape']:.1f}%)")
                        
                        # –°–æ–∑–¥–∞–µ–º —á–µ—Ç—ã—Ä–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
                        viz_tabs = st.tabs(["–ë–∞–∑–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è", "–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"])
                        
                        # –í–∫–ª–∞–¥–∫–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        with viz_tabs[0]:
                            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
                            st.plotly_chart(
                                create_time_series_plot(df, date_col, col, title=f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {col}"), 
                                use_container_width=True
                            )
                            
                            # Box Plot
                            st.plotly_chart(
                                create_box_plot(df[col], title=f"Box Plot: {col}"), 
                                use_container_width=True
                            )
                        
                        # –í–∫–ª–∞–¥–∫–∞ 2: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        with viz_tabs[1]:
                            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                            col1, col2 = st.columns(2)
                            with col1:
                                st.plotly_chart(
                                    create_distribution_plot(df[col], title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {col}"), 
                                    use_container_width=True
                                )
                            
                            # QQ-Plot
                            with col2:
                                st.plotly_chart(
                                    create_qq_plot(df[col], title=f"QQ-Plot: {col}"), 
                                    use_container_width=True
                                )
                        
                        # –í–∫–ª–∞–¥–∫–∞ 3: –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏ Lag-Plot
                        with viz_tabs[2]:
                            col1, col2 = st.columns(2)
                            with col1:
                                # –ì—Ä–∞—Ñ–∏–∫ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                                st.plotly_chart(
                                    create_acf_plot(df[col], title=f"–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {col}"), 
                                    use_container_width=True
                                )
                            
                            with col2:
                                # Lag Plot
                                st.plotly_chart(
                                    create_lag_plot(df[col], title=f"Lag Plot: {col}"), 
                                    use_container_width=True
                                )
                        
                        # –í–∫–ª–∞–¥–∫–∞ 4: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
                        with viz_tabs[3]:
                            col1, col2 = st.columns([2, 1])
                            with col1:
                                # –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
                                st.plotly_chart(
                                    create_decomposition_plot(df, date_col, col, model=decomposition_model, title=f"–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: {col}"), 
                                    use_container_width=True
                                )
                            
                            with col2:
                                # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                                st.plotly_chart(
                                    create_seasonality_heatmap(df, date_col, col, title=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {col}"), 
                                    use_container_width=True
                                )
                        
                        # –í–∫–ª–∞–¥–∫–∞ 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
                        with viz_tabs[4]:
                            if model_evaluation and "error" not in model_evaluation:
                                st.plotly_chart(
                                    create_model_evaluation_plot(df, date_col, col, model_evaluation, test_size=test_size, title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: {col}"), 
                                    use_container_width=True
                                )
                            else:
                                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.")
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        st.markdown("#### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                        if analysis['conclusion'] == '–•–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                            st.markdown("""
                            - ‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏**: ARIMA, ETS, –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
                            - ‚úÖ **–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è**: –í–æ–∑–º–æ–∂–µ–Ω –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                            - ‚úÖ **–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (–º–µ—Å—è—Ü/–∫–≤–∞—Ä—Ç–∞–ª)
                            - ‚úÖ **–î–µ–π—Å—Ç–≤–∏—è**: –í–∫–ª—é—á–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å
                            """)
                        elif analysis['conclusion'] == '–°—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥':
                            st.markdown("""
                            - ‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏**: –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã (XGBoost, Random Forest), —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
                            - ‚ö†Ô∏è **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
                            - ‚ö†Ô∏è **–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è**: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (1-3 –ø–µ—Ä–∏–æ–¥–∞ –≤–ø–µ—Ä–µ–¥)
                            - ‚ö†Ô∏è **–î–µ–π—Å—Ç–≤–∏—è**: –î–æ–±–∞–≤—å—Ç–µ –≤–Ω–µ—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω—Å–∞–º–±–ª–∏ –º–æ–¥–µ–ª–µ–π
                            """)
                        else:
                            st.markdown("""
                            - ‚ùå **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–¥—Ö–æ–¥—ã**: –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–º–µ—Å—Ç–æ —Ç–æ—á–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
                            - ‚ùå **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é**: –ë—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                            - ‚ùå **–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**: –¢–æ–ª—å–∫–æ —Å–∞–º—ã–π –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (1 –ø–µ—Ä–∏–æ–¥)
                            - ‚ùå **–î–µ–π—Å—Ç–≤–∏—è**: –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞, –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
                            """)
                        
                        st.markdown("---")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–∞–º–∏.")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –≤—Ä—É—á–Ω—É—é
            date_col_options = list(df.columns)
            if date_col_options:
                manual_date_col = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –≤—Ä—É—á–Ω—É—é",
                    options=date_col_options
                )
                
                if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º –¥–∞—Ç—ã"):
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä—É—á–Ω—É—é —Å—Ç–æ–ª–±—Ü–æ–º
                    try:
                        df[manual_date_col] = pd.to_datetime(df[manual_date_col], errors='coerce')
                        st.experimental_rerun()
                    except:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü {manual_date_col} –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∞–π–¥–±–∞—Ä
with st.sidebar.expander("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º", expanded=False):
    st.markdown("""
    ### 1. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)
    –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö.
    - CV < 0.3: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    - 0.3 ‚â§ CV < 1.0: –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    - 1.0 ‚â§ CV < 2.0: –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    - CV ‚â• 2.0: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    ### 2. –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    –ú–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –æ—Ç —Å–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    - |r| > 0.6: –°–∏–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å
    - 0.3 < |r| ‚â§ 0.6: –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    - |r| ‚â§ 0.3: –°–ª–∞–±–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –Ω–∏–∑–∫–∞—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å
    
    ### 3. –ü—Ä–æ—Ü–µ–Ω—Ç –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    –î–æ–ª—è –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥–µ.
    - < 10%: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—è–¥
    - 10-40%: –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
    - > 40%: –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    
    ### 4. –ü—Ä–æ—Ü–µ–Ω—Ç —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞
    –ö–∞–∫ —á–∞—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –º–µ–Ω—è—é—Ç –∑–Ω–∞–∫ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
    - < 10%: –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—è–¥ —Å —Ä–µ–¥–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∑–Ω–∞–∫–∞
    - 10-30%: –£–º–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
    - > 30%: –ß–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–∫–∞, —Ç—Ä—É–¥–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä—è–¥
    
    ### 5. –≠–Ω—Ç—Ä–æ–ø–∏—è
    –ú–µ—Ä–∞ —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.
    - < 0.3: –ù–∏–∑–∫–∞—è —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä—è–¥
    - 0.3-0.6: –°—Ä–µ–¥–Ω—è—è —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å
    - > 0.6: –í—ã—Å–æ–∫–∞—è —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å, –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä—è–¥
    
    ### 6. –ú–µ—Ç—Ä–∏–∫–∞ –õ—è–ø—É–Ω–æ–≤–∞
    –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º (—Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏).
    - < 0: –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—è–¥
    - > 0: –•–∞–æ—Ç–∏—á–Ω—ã–π —Ä—è–¥ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –±–æ–ª–µ–µ —Ö–∞–æ—Ç–∏—á–Ω—ã–π)
    
    ### 7. –¢–µ—Å—Ç –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å (p-–∑–Ω–∞—á–µ–Ω–∏–µ)
    –¢–µ—Å—Ç –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ —Ä—è–¥–∞.
    - p < 0.05: –†—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω (–ª–µ–≥—á–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å)
    - p ‚â• 0.05: –†—è–¥ –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω (—Ç—Ä—É–¥–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å)
    
    ### 8. MAPE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)
    –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –º–æ–¥–µ–ª–∏.
    - < 10%: –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    - 10-20%: –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    - 20-30%: –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    - > 30%: –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    """)

with st.sidebar.expander("–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç—å", expanded=False):
    st.markdown("""
    ### –î–ª—è —Å—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
    1. **–ê–≥—Ä–µ–≥–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ**
       - –ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å –º–µ—Å—è—á–Ω—ã—Ö –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≥–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
    
    2. **–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ**
       - –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º
       - Box-Cox –∏–ª–∏ Yeo-Johnson –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
       - –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∞ –≤—ã–±—Ä–æ—Å–æ–≤
    
    3. **–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ**
       - –í–∫–ª—é—á–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–º–µ—Å—è—Ü, –∫–≤–∞—Ä—Ç–∞–ª)
       - –î–æ–±–∞–≤—å—Ç–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∫ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ã
    
    ### –î–ª—è –ø–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
    1. **–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥**
       - –í–º–µ—Å—Ç–æ —Ç–æ—á–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π/–ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π)
       - –ú–æ–¥–µ–ª–∏—Ä—É–π—Ç–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)
    
    2. **–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞**
       - –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ä—è–¥ –Ω–∞ —Ç—Ä–µ–Ω–¥, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
       - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
       - –î–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    
    3. **–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**
       - –í–º–µ—Å—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
       - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    4. **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏**
       - –î–æ–ø–æ–ª–Ω—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ—Ç–æ–¥ –î–µ–ª—å—Ñ–∏)
       - –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
    """)

with st.sidebar.expander("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏", expanded=False):
    st.markdown("""
    ### –î–ª—è —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
    - **ARIMA, SARIMA** - –¥–ª—è —Ä—è–¥–æ–≤ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é
    - **ETS (Exponential Smoothing)** - –¥–ª—è —Ä—è–¥–æ–≤ —Å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é
    - **Prophet** - –¥–ª—è —Ä—è–¥–æ–≤ —Å –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    - **–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (LSTM, GRU)** - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    
    ### –î–ª—è —Å—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
    - **–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã** - XGBoost, Random Forest, Gradient Boosting
    - **–ì–∏–±—Ä–∏–¥–Ω—ã–µ –º–æ–¥–µ–ª–∏** - –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    - **–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π** - Ridge, LASSO –¥–ª—è –±–æ—Ä—å–±—ã —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º
    - **–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ–º** - –¥–ª—è —Ä—è–¥–æ–≤ —Å –∑–∞—Ç—É—Ö–∞—é—â–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
    
    ### –î–ª—è –ø–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
    - **–ù–∞–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏** - —Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω–∞, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    - **–ú–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∞–Ω—ã** - —É—Å—Ç–æ–π—á–∏–≤—ã –∫ –≤—ã–±—Ä–æ—Å–∞–º
    - **–ö–≤–∞–Ω—Ç–∏–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è** - –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
    - **–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã** - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é
    """)

with st.sidebar.expander("–û –º–æ–¥–µ–ª–∏ VAR", expanded=False):
    st.markdown("""
    ### Vector Autoregression (VAR)
    
    –ú–æ–¥–µ–ª—å VAR (Vector Autoregression) —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.
    
    #### –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VAR:
    
    1. **–î–ª—è —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤**:
       - –ö–æ–≥–¥–∞ —Ä—è–¥—ã –∏–º–µ—é—Ç –æ—á–µ–≤–∏–¥–Ω—É—é –≤–∑–∞–∏–º–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
       - –ö–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
       - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
       - –ö–æ–≥–¥–∞ —Ä—è–¥—ã –∏–º–µ—é—Ç —Å—Ö–æ–∂—É—é —á–∞—Å—Ç–æ—Ç—É –∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
    
    2. **–î–ª—è —Å—Ä–µ–¥–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤**:
       - –ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä—è–¥–æ–≤ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
       - –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏ (—Ä–∞–∑–Ω–æ—Å—Ç–∏, –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ) –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
       - –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
       - –ö–æ–≥–¥–∞ –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –ø–æ –ì—Ä–µ–π–Ω–¥–∂–µ—Ä—É
    
    3. **–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤**:
       - VAR —Ç—Ä–µ–±—É–µ—Ç —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —á–∞—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –ø–ª–æ—Ö–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö —Ä—è–¥–æ–≤
       - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ö–∞–æ—Ç–∏—á–Ω—ã—Ö —Ä—è–¥–æ–≤ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É—Å–∏–ª–∏—Ç—å —à—É–º
       - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
       - –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    
    #### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è VAR:
    - –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å —Ä—è–¥–æ–≤ (–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–º—É –≤–∏–¥—É)
    - –û–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö —Ä—è–¥–æ–≤
    - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    - –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    - –†–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5-7 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.sidebar.markdown("---")
st.sidebar.info("""
### –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.

**–í–µ—Ä—Å–∏—è 2.0** - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏.
""")
